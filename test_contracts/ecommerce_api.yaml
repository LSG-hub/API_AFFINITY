openapi: 3.0.3
info:
  title: E-Commerce API
  description: Complete e-commerce platform API for online retail operations
  version: 2.1.0
  contact:
    name: E-Commerce Team
    email: support@ecommerce.com
servers:
  - url: https://api.ecommerce.com/v2
    description: Production server
  - url: https://staging-api.ecommerce.com/v2
    description: Staging server

paths:
  /products:
    get:
      summary: List all products
      description: Retrieve a paginated list of all products in the catalog
      operationId: listProducts
      tags:
        - Products
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          description: Filter by product category
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '400':
          description: Bad request
        '500':
          description: Internal server error
    post:
      summary: Create new product
      description: Add a new product to the catalog
      operationId: createProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /products/{productId}:
    get:
      summary: Get product by ID
      description: Retrieve detailed information about a specific product
      operationId: getProduct
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique identifier for the product
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update product
      description: Update an existing product's information
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    delete:
      summary: Delete product
      description: Remove a product from the catalog
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found

  /orders:
    get:
      summary: List customer orders
      description: Retrieve all orders for the authenticated customer
      operationId: listOrders
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter orders by status
          schema:
            $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
    post:
      summary: Create new order
      description: Place a new order for products
      operationId: createOrder
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order data

  /orders/{orderId}:
    get:
      summary: Get order details
      description: Retrieve detailed information about a specific order
      operationId: getOrder
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  /customers/{customerId}:
    get:
      summary: Get customer profile
      description: Retrieve customer profile information
      operationId: getCustomer
      tags:
        - Customers
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
        - category
      properties:
        id:
          type: string
          format: uuid
          description: Unique product identifier
        name:
          type: string
          description: Product name
          minLength: 1
          maxLength: 255
        description:
          type: string
          description: Detailed product description
        price:
          type: number
          format: float
          minimum: 0
          description: Product price in USD
        category:
          type: string
          description: Product category
        brand:
          type: string
          description: Product brand
        sku:
          type: string
          description: Stock keeping unit
        inventory:
          type: integer
          minimum: 0
          description: Available stock quantity
        images:
          type: array
          items:
            type: string
            format: uri
          description: Product image URLs
        tags:
          type: array
          items:
            type: string
          description: Product tags for search
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductInput:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        price:
          type: number
          format: float
          minimum: 0
        category:
          type: string
        brand:
          type: string
        sku:
          type: string
        inventory:
          type: integer
          minimum: 0
          default: 0
        images:
          type: array
          items:
            type: string
            format: uri
        tags:
          type: array
          items:
            type: string

    ProductList:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Order:
      type: object
      required:
        - id
        - customerId
        - items
        - status
        - totalAmount
      properties:
        id:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          $ref: '#/components/schemas/OrderStatus'
        totalAmount:
          type: number
          format: float
          minimum: 0
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderInput:
      type: object
      required:
        - items
        - shippingAddress
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemInput'
          minItems: 1
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'

    OrderItem:
      type: object
      required:
        - productId
        - quantity
        - price
      properties:
        productId:
          type: string
          format: uuid
        productName:
          type: string
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          format: float
          minimum: 0
        subtotal:
          type: number
          format: float
          minimum: 0

    OrderItemInput:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1

    OrderStatus:
      type: string
      enum:
        - pending
        - confirmed
        - processing
        - shipped
        - delivered
        - cancelled

    Customer:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time

    Address:
      type: object
      required:
        - street
        - city
        - state
        - zipCode
        - country
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        country:
          type: string
        isDefault:
          type: boolean
          default: false

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0